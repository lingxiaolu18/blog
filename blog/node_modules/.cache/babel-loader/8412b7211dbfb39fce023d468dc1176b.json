{"ast":null,"code":"export const fetchLoginStatus = () => {\n  return fetch('/session', {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'newwork-error'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};\nexport const fetchLogIn = (username, password) => {\n  return fetch('/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).catch(() => {\n    return Promise.reject({\n      code: 'network-error'\n    });\n  }).then(response => {\n    console.log(response);\n\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};\nexport const fetchAllPosts = username => {\n  return fetch('/posts/' + username, {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'network-error'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};\nexport const fetchAddPost = (username, post) => {\n  return fetch('/posts/' + username, {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      post\n    })\n  }).catch(() => {\n    return Promise.reject({\n      code: 'network-error'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};\nexport const fetchOnePost = (username, postId) => {\n  return fetch('/posts/' + username + '/' + postId, {\n    method: 'GET'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'network-error'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};\nexport const fetchUpdatePost = (username, postId, post) => {\n  return fetch('/posts/' + username + '/' + postId, {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      post\n    })\n  }).catch(() => {\n    return Promise.reject({\n      code: 'network-error'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};\nexport const fetchDeleteOnePost = (username, postId) => {\n  return fetch('/posts/' + username + '/' + postId, {\n    method: 'DELETE'\n  }).catch(() => {\n    return Promise.reject({\n      code: 'network-error'\n    });\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().then(result => Promise.reject(result));\n    }\n\n    return response.json();\n  });\n};","map":{"version":3,"sources":["/Users/sf/code_base/React-blog/src/services.js"],"names":["fetchLoginStatus","fetch","method","catch","Promise","reject","code","then","response","ok","json","result","fetchLogIn","username","password","headers","Headers","body","JSON","stringify","console","log","fetchAllPosts","fetchAddPost","post","fetchOnePost","postId","fetchUpdatePost","fetchDeleteOnePost"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,MAAI;AAChC,SAAOC,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAC;AADgB,GAAb,CAAL,CAGNC,KAHM,CAGA,MAAI;AACT,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACD,GALM,EAMNC,IANM,CAMAC,QAAD,IAAY;AAChB,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACd,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAEP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA7B,CAAP;AACD;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACD,GAXM,CAAP;AAYD,CAbI;AAeP,OAAO,MAAME,UAAU,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAsB;AAC5C,SAAOb,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAC,MADgB;AAEvBa,IAAAA,OAAO,EAAC,IAAIC,OAAJ,CAAY;AAClB,sBAAe;AADG,KAAZ,CAFe;AAKvBC,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACN,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAf;AALkB,GAAb,CAAL,CAONX,KAPM,CAOA,MAAI;AACT,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACD,GATM,EAUNC,IAVM,CAUAC,QAAD,IAAY;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;;AACF,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACd,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAIP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA/B,CAAP;AACD;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACD,GAhBM,CAAP;AAiBH,CAlBM;AAoBP,OAAO,MAAMY,aAAa,GAAIT,QAAD,IAAY;AACrC,SAAOZ,KAAK,CAAC,YAAYY,QAAb,EAAuB;AAC/BX,IAAAA,MAAM,EAAC;AADwB,GAAvB,CAAL,CAGNC,KAHM,CAGA,MAAI;AACP,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACH,GALM,EAMNC,IANM,CAMAC,QAAD,IAAY;AACd,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAEP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA7B,CAAP;AACH;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACH,GAXM,CAAP;AAYH,CAbM;AAeP,OAAO,MAAMa,YAAY,GAAG,CAACV,QAAD,EAAWW,IAAX,KAAkB;AAC1C,SAAOvB,KAAK,CAAC,YAAYY,QAAb,EAAuB;AAC/BX,IAAAA,MAAM,EAAC,MADwB;AAE/Ba,IAAAA,OAAO,EAAC,IAAIC,OAAJ,CAAY;AAChB,sBAAe;AADC,KAAZ,CAFuB;AAK/BC,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACK,MAAAA;AAAD,KAAf;AAL0B,GAAvB,CAAL,CAONrB,KAPM,CAOA,MAAI;AACP,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACH,GATM,EAUNC,IAVM,CAUAC,QAAD,IAAY;AACd,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAEP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA7B,CAAP;AACH;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACH,GAfM,CAAP;AAgBH,CAjBM;AAmBP,OAAO,MAAMe,YAAY,GAAG,CAACZ,QAAD,EAAWa,MAAX,KAAoB;AAC5C,SAAOzB,KAAK,CAAC,YAAYY,QAAZ,GAAuB,GAAvB,GAA6Ba,MAA9B,EAAsC;AAC9CxB,IAAAA,MAAM,EAAC;AADuC,GAAtC,CAAL,CAGNC,KAHM,CAGA,MAAI;AACP,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACH,GALM,EAMNC,IANM,CAMAC,QAAD,IAAY;AACd,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAEP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA7B,CAAP;AACH;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACH,GAXM,CAAP;AAYH,CAbM;AAeP,OAAO,MAAMiB,eAAe,GAAG,CAACd,QAAD,EAAWa,MAAX,EAAmBF,IAAnB,KAA0B;AACrD,SAAOvB,KAAK,CAAC,YAAYY,QAAZ,GAAuB,GAAvB,GAA6Ba,MAA9B,EAAsC;AAC9CxB,IAAAA,MAAM,EAAC,KADuC;AAE9Ca,IAAAA,OAAO,EAAC,IAAIC,OAAJ,CAAY;AAChB,sBAAe;AADC,KAAZ,CAFsC;AAK9CC,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACK,MAAAA;AAAD,KAAf;AALyC,GAAtC,CAAL,CAONrB,KAPM,CAOA,MAAI;AACP,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACH,GATM,EAUNC,IAVM,CAUAC,QAAD,IAAY;AACd,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAEP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA7B,CAAP;AACH;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACH,GAfM,CAAP;AAgBH,CAjBM;AAmBP,OAAO,MAAMkB,kBAAkB,GAAG,CAACf,QAAD,EAAWa,MAAX,KAAoB;AAClD,SAAOzB,KAAK,CAAC,YAAYY,QAAZ,GAAuB,GAAvB,GAA6Ba,MAA9B,EAAsC;AAC9CxB,IAAAA,MAAM,EAAC;AADuC,GAAtC,CAAL,CAGNC,KAHM,CAGA,MAAI;AACP,WAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAf,CAAP;AACH,GALM,EAMNC,IANM,CAMAC,QAAD,IAAY;AACd,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,MAAM,IAAEP,OAAO,CAACC,MAAR,CAAeM,MAAf,CAA7B,CAAP;AACH;;AACD,WAAOH,QAAQ,CAACE,IAAT,EAAP;AACH,GAXM,CAAP;AAYH,CAbM","sourcesContent":["export const fetchLoginStatus = ()=>{\n    return fetch('/session', {\n      method:'GET'\n    })\n    .catch(()=>{\n      return Promise.reject({code:'newwork-error'});\n    })\n    .then((response)=>{\n      if(!response.ok){\n        return response.json().then(result=>Promise.reject(result));\n      }\n      return response.json();\n    });\n  };\n\nexport const fetchLogIn = (username, password)=>{\n    return fetch('/session', {\n      method:'POST',\n      headers:new Headers({\n        'content-type':'application/json',\n      }),\n      body:JSON.stringify({username, password})\n    })\n    .catch(()=>{\n      return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        console.log(response);\n      if(!response.ok){\n        return response.json().then(result => Promise.reject(result));\n      }\n      return response.json();\n    });\n};\n\nexport const fetchAllPosts = (username)=>{\n    return fetch('/posts/' + username, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result)); \n        }\n        return response.json();\n    });\n};\n\nexport const fetchAddPost = (username, post)=>{\n    return fetch('/posts/' + username, {\n        method:'POST',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({post})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchOnePost = (username, postId)=>{\n    return fetch('/posts/' + username + '/' + postId, {\n        method:'GET'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchUpdatePost = (username, postId, post)=>{\n    return fetch('/posts/' + username + '/' + postId, {\n        method:'PUT',\n        headers:new Headers({\n            'content-type':'application/json',\n        }),\n        body:JSON.stringify({post})\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\nexport const fetchDeleteOnePost = (username, postId)=>{\n    return fetch('/posts/' + username + '/' + postId, {\n        method:'DELETE'\n    })\n    .catch(()=>{\n        return Promise.reject({code:'network-error'});\n    })\n    .then((response)=>{\n        if(!response.ok){\n            return response.json().then(result=>Promise.reject(result));\n        }\n        return response.json();\n    });\n};\n\n"]},"metadata":{},"sourceType":"module"}